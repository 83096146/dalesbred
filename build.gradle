buildscript {
    repositories {
        mavenCentral()
        maven { url 'http://repo.springsource.org/plugins-release' }
    }
    dependencies {
        classpath 'org.springframework.build.gradle:propdeps-plugin:0.0.5'
        classpath("org.asciidoctor:asciidoctor-gradle-plugin:0.7.0")
        classpath 'com.github.townsfolk:gradle-release:1.2'
    }
}


configure(allprojects) { project ->
    group = 'fi.evident.dalesbred'

    apply plugin: 'java'
    apply plugin: 'propdeps'

    task buildDocs {
        group 'documentation'
        description 'Builds all documentation.'
    }

    repositories {
        mavenCentral()
    }
}

configure(rootProject) { project ->
    apply plugin: 'release'
    apply plugin: 'asciidoctor'
    apply from: "${rootProject.projectDir}/gradle/ssh-support.gradle"

    buildDocs.dependsOn asciidoctor

    asciidoctor {
        options = [
                eruby: 'erubis',
                attributes: [
                        icons: 'font',
                        'iconfont-cdn': 'https://cdnjs.cloudflare.com/ajax/libs/font-awesome/3.2.1/css/font-awesome.min.css',
                        prettifydir: 'https://cdnjs.cloudflare.com/ajax/libs/prettify/r298',
                        toc: 'right',
                        'source-highlighter': 'prettify',
                        revnumber: project.version,
                        docinfo: "",
                        javadocBase: "https://dalesbred.evident.fi/docs/${project.version}/api/?"
                ]
        ]
    }

    task publishWebsite {
        group 'publishing'
        description 'Publishes the website to dalesbred.evident.fi'
        dependsOn installShhTasks

        doLast {
            ant.scp(todir: "evident@uuhi.evident.fi:/var/www/dalesbred",
                    keyfile: '${user.home}/.ssh/id_rsa',
                    trust: true) {
                fileset(dir: "${project.projectDir}/website/src") {
                    include(name: '**/**')
                }
            }
        }
    }

    task publishReferenceDocumentation {
        group 'publishing'
        description 'Publishes the reference documentation to dalesbred.evident.fi'
        dependsOn installShhTasks, buildDocs

        doLast {
            ant.sshexec(host: 'uuhi.evident.fi',
                    username: 'evident',
                    command: "mkdir -p /var/www/dalesbred/docs/${project.version}/reference",
                    keyfile: '${user.home}/.ssh/id_rsa',
                    trust: true)

            ant.scp(todir: "evident@uuhi.evident.fi:/var/www/dalesbred/docs/${project.version}/reference",
                    keyfile: '${user.home}/.ssh/id_rsa',
                    trust: true) {
                fileset(dir: "${project.projectDir}/build/asciidoc") {
                    include(name: '**/**')
                }
            }
        }
    }

    //publish.dependsOn publishReferenceDocumentation

}

configure(subprojects) { project ->
    apply plugin: 'maven'
    apply plugin: 'maven-publish'
    apply plugin: 'signing'
    apply plugin: 'propdeps-idea'
    apply from: "${rootProject.projectDir}/gradle/publish-maven.gradle"

    buildDocs.dependsOn javadoc

    ext.isReleaseVersion = !version.endsWith("SNAPSHOT")
    ext.springVersion = '3.2.4.RELEASE'
    ext.junitVersion = '4.11'
    ext.jetbrainsAnnotationsVersion = '13.0'
    ext.hsqldbVersion = '2.3.1'

    sourceCompatibility = 1.6
    targetCompatibility = 1.6

    task javadocJar(type: Jar, dependsOn: javadoc) {
        classifier = 'javadoc'
        from javadoc.destinationDir
    }

    task sourceJar(type: Jar) {
        classifier = 'sources'
        from sourceSets.main.allSource
    }

    artifacts {
        archives jar

        archives javadocJar
        archives sourceJar
    }

    signing {
        required { isReleaseVersion && gradle.taskGraph.hasTask("uploadArchives") }
        sign configurations.archives
    }

    javadoc {
        options.memberLevel = org.gradle.external.javadoc.JavadocMemberLevel.PROTECTED
        options.header = project.name
        options.links('http://download.java.net/jdk8/docs/api/',
                'http://docs.spring.io/spring/docs/current/javadoc-api/',
                'http://www.joda.org/joda-time/apidocs/')
        options.addStringOption('Xdoclint:none', '-quiet')
    }
}

project(':dalesbred') {
    description = 'Dalesbred - a database access library'

    dependencies {
        optional 'joda-time:joda-time:2.3'
        optional 'aopalliance:aopalliance:1.0'
        optional 'com.google.inject:guice:3.0'
        optional "org.springframework:spring-context:$springVersion"
        optional "org.springframework:spring-jdbc:$springVersion"
        optional "org.jetbrains:annotations:$jetbrainsAnnotationsVersion"

        optional 'org.postgresql:postgresql:9.3-1100-jdbc41'

        testCompile "org.hsqldb:hsqldb:$hsqldbVersion"
        testCompile 'mysql:mysql-connector-java:5.1.26'
        testCompile "junit:junit:$junitVersion"
        testCompile 'org.mockito:mockito-core:1.9.5'
    }
}

project(':dalesbred-junit') {
    description = 'Dalesbred JUnit-support'

    dependencies {
        compile project(':dalesbred')
        compile "junit:junit:$junitVersion"
        compile 'javax.inject:javax.inject:1'

        optional "org.jetbrains:annotations:$jetbrainsAnnotationsVersion"

        testCompile "org.hsqldb:hsqldb:$hsqldbVersion"
    }
}
