/*
 * Copyright (c) 2015 Evident Solutions Oy
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */

buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath 'com.bmuschko:gradle-nexus-plugin:2.3.1'
    }
}

plugins {
    id 'net.researchgate.release' version '2.0.2'
    id 'org.asciidoctor.convert' version '1.5.2'
    id 'org.hidetake.ssh' version '1.1.1'
    id 'org.ajoberstar.github-pages' version '1.1.0'
}

release {
    // tagTemplate = 'v$version' // TODO: this is not available in release-plugin 2.0.2 but we want to use it later
}

remotes {
    website {
        host = 'uuhi.evident.fi'
        user = 'evident'
        identity = file("${System.properties['user.home']}/.ssh/id_rsa")
    }
}

configure(allprojects) { project ->
    group = 'org.dalesbred'

    repositories {
        jcenter()
    }
}

configure(rootProject) { project ->
    asciidoctor {
        sourceDir = file('src/asciidoc')
        options = [
                eruby: 'erubis'
        ]
        attributes = [
                icons: 'font',
                toc: 'right',
                'source-highlighter': 'prettify',
                revnumber: project.version.toString(),
                docinfo: "",
                javadocBase: "http://dalesbred.org/docs/api/?"
        ]
    }
}

configure(subprojects) { project ->
    apply plugin: 'com.bmuschko.nexus'
    apply from: "${rootProject.projectDir}/gradle/publish-maven.gradle"

    project.version = rootProject.version.toString()

    ext.isReleaseVersion = { !version.endsWith("SNAPSHOT") }
    ext.springVersion = '4.0.3.RELEASE'
    ext.junitVersion = '4.11'
    ext.jetbrainsAnnotationsVersion = '13.0'
    ext.hsqldbVersion = '2.3.2'
}

configure([project(':dalesbred'), project(':dalesbred-junit')]) {
    apply plugin: 'java'

    sourceCompatibility = 1.6
    targetCompatibility = 1.6

    javadoc {
        options.memberLevel = org.gradle.external.javadoc.JavadocMemberLevel.PROTECTED
        options.header = project.name
        options.links('http://docs.oracle.com/javase/8/docs/api/',
                'http://docs.spring.io/spring/docs/current/javadoc-api/',
                'http://www.joda.org/joda-time/apidocs/')
        options.addStringOption('Xdoclint:none', '-quiet')
    }
}

project(':dalesbred') {
    description = 'Dalesbred - a database access library'

    dependencies {
        compile 'joda-time:joda-time:2.3'
        compile 'org.threeten:threetenbp:1.0'
        compile 'aopalliance:aopalliance:1.0'
        compile 'com.google.inject:guice:3.0'
        compile "org.springframework:spring-context:$springVersion"
        compile "org.springframework:spring-jdbc:$springVersion"
        compile "org.jetbrains:annotations:$jetbrainsAnnotationsVersion"

        compile 'org.postgresql:postgresql:9.3-1101-jdbc41'

        testCompile "org.hsqldb:hsqldb:$hsqldbVersion"
        testCompile 'mysql:mysql-connector-java:5.1.30'
        testCompile "junit:junit:$junitVersion"
        testCompile 'org.mockito:mockito-core:1.9.5'
    }

    apply plugin: 'osgi'

    jar {
        manifest {
            instruction 'Import-Package', '' +
                    'com.google.inject.*;resolution:=optional,' +
                    'javax.inject.*;resolution:=optional,' +
                    'org.aopalliance.intercept.*;resolution:=optional,' +
                    'org.joda.time.*;resolution:=optional,' +
                    'org.springframework.*;resolution:=optional,' +
                    'org.postgresql.*;resolution:=optional,' +
                    '*'
        }
    }

    task publishJavadocs {
        group 'publishing'
        description 'Publishes the javadocs documentation to dalesbred.org'
        dependsOn javadoc

        doLast {
            ssh.run {
                session(remotes.website) {
                    def target = "/var/www/dalesbred/docs/${project.version}/api"
                    execute "mkdir -p $target"
                    put from: "${project.projectDir}/build/docs/javadoc", into: target
                }
            }
        }
    }
}

project(':dalesbred-junit') {
    description = 'Dalesbred JUnit-support'

    dependencies {
        compile project(':dalesbred')
        compile "junit:junit:$junitVersion"
        compile 'javax.inject:javax.inject:1'

        compile "org.jetbrains:annotations:$jetbrainsAnnotationsVersion"

        testCompile "org.hsqldb:hsqldb:$hsqldbVersion"
    }
}

project(':website') {

    task copySources(type: Copy) {
        from 'src'
        into "build/dalesbred"
    }

    task copyApi(type: Copy) {
        from files(tasks.findByPath(':dalesbred:javadoc'))
        into "build/dalesbred/docs/api/"
    }

    task copyReference(type: Copy) {
        dependsOn tasks.findByPath(':asciidoctor')
        from '../build/asciidoc/html5/'
        into "build/dalesbred/docs/reference/"
    }

    assemble.dependsOn copySources
    assemble.dependsOn copyApi
    assemble.dependsOn copyReference

    publishGhPages.dependsOn assemble

    githubPages {
        repoUri = 'git@github.com:EvidentSolutions/dalesbred.git'
        deleteExistingFiles = true
        pages {
            from files('build/dalesbred')
        }
    }
}
